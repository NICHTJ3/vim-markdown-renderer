{"version":3,"sources":["components/Editor/index.js","components/Preview/index.js","App.js","hooks/useLocalStorage.js","serviceWorker.js","index.js"],"names":["index","value","onChange","autoFocus","className","options","mode","keyMap","theme","readOnly","lineNumbers","Preview","md","source","escapeHtml","App","key","initialValue","useState","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","valueToStore","Function","setItem","stringify","useLocalStorage","setMd","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"kRAQe,SAASA,EAAT,GAAkC,IAAlBC,EAAiB,EAAjBA,MAAMC,EAAW,EAAXA,SACnC,OACE,kBAAC,IAAD,CACED,MAAOA,EACPC,SAAUA,EACVC,WAAW,EACXC,UAAU,SACVC,QAAS,CACPC,KAAM,WACNC,OAAQ,MACRC,MAAO,WACPC,UAAU,EACVC,aAAa,K,mCCfN,SAASC,EAAT,GAAwB,IAANC,EAAK,EAALA,GAC/B,OACE,6BACI,kBAAC,IAAD,CAAUR,UAAU,UAAUS,OAAQD,EAAIE,YAAY,KCW/CC,MAdf,WAAgB,IAAD,ECFA,SAAyBC,EAAKC,GAAc,MAKnBC,oBAAS,WAC7C,IAGE,IAAMC,EAAOC,OAAOC,aAAaC,QAAQN,GAIzC,OAAOG,EAAOI,KAAKC,MAAML,GAAQF,EACjC,MAAOQ,GAKP,OAFAC,QAAQC,IAAIF,GAELR,MAnB8C,mBAKlDW,EALkD,KAKrCC,EALqC,KAgDzD,MAAO,CAACD,EArBS,SAAC3B,GAChB,IAGE,IAAM6B,EACJ7B,aAAiB8B,SAAW9B,EAAM2B,GAAe3B,EAInD4B,EAAeC,GAIfV,OAAOC,aAAaW,QAAQhB,EAAKO,KAAKU,UAAUH,IAChD,MAAOL,GAGPC,QAAQC,IAAIF,MDzCIS,CAAgB,WAAY,4BADnC,mBACNtB,EADM,KACFuB,EADE,KAGb,OACE,oCACE,yBAAK/B,UAAU,aACb,wBAAIA,UAAU,SAAd,wBACA,kBAAC,EAAD,CAAQH,MAAOW,EAAIV,SAAUiC,IAC7B,kBAACxB,EAAD,CAASC,GAAIA,OEDDwB,QACW,cAA7BhB,OAAOiB,SAASC,UAEe,UAA7BlB,OAAOiB,SAASC,UAEhBlB,OAAOiB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAAC1B,GACNC,QAAQD,MAAMA,EAAM2B,a","file":"static/js/main.8715fbd7.chunk.js","sourcesContent":["import React from 'react';\nimport Editor from 'react-codemirror';\nimport './editor.css';\nimport 'codemirror/lib/codemirror.css';\nimport 'codemirror/theme/material.css';\nimport 'codemirror/mode/markdown/markdown';\nimport 'codemirror/keymap/vim';\n\nexport default function index({value,onChange}) {\n  return (\n    <Editor\n      value={value}\n      onChange={onChange}\n      autoFocus={true}\n      className=\"editor\"\n      options={{\n        mode: 'markdown',\n        keyMap: 'vim',\n        theme: 'material',\n        readOnly: false,\n        lineNumbers: true,\n      }}\n    />\n  );\n}\n","import React from 'react'\nimport Markdown from 'react-markdown';\nimport './markdown.css';\nimport './preview.css';\n\nexport default function Preview({md}) {\n  return (\n    <div>\n        <Markdown className=\"preview\" source={md} escapeHtml={true} />\n    </div>\n  )\n}\n\n","import React from 'react';\nimport Editor from './components/Editor';\nimport useLocalStorage from './hooks/useLocalStorage';\nimport Preview from './components/Preview';\n\nfunction App() {\n  const [md, setMd] = useLocalStorage('document', '# Put your markdown here');\n\n  return (\n    <>\n      <div className=\"container\">\n        <h1 className=\"title\">Vim Markdown Preview</h1>\n        <Editor value={md} onChange={setMd} />\n        <Preview md={md} />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import { useState } from 'react';\n// Hook\n\nexport default function useLocalStorage(key, initialValue) {\n  // State to store our value\n\n  // Pass initial state function to useState so logic is only executed once\n\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from local storage by key\n\n      const item = window.localStorage.getItem(key);\n\n      // Parse stored json or if none return initialValue\n\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n\n      console.log(error);\n\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that ...\n\n  // ... persists the new value to localStorage.\n\n  const setValue = (value) => {\n    try {\n      // Allow value to be a function so we have same API as useState\n\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n\n      // Save state\n\n      setStoredValue(valueToStore);\n\n      // Save to local storage\n\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}